-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Frontend.Language.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Frontend.Language.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.Frontend.Language.Abs.Ident -> Result
transIdent x = case x of
  Language.Frontend.Language.Abs.Ident string -> failure x

transProgram :: Language.Frontend.Language.Abs.Program -> Result
transProgram x = case x of
  Language.Frontend.Language.Abs.Prog functions -> failure x

transFunction :: Language.Frontend.Language.Abs.Function -> Result
transFunction x = case x of
  Language.Frontend.Language.Abs.Fun ident idents exp -> failure x

transExp :: Language.Frontend.Language.Abs.Exp -> Result
transExp x = case x of
  Language.Frontend.Language.Abs.EIf exp1 exp2 exp3 -> failure x
  Language.Frontend.Language.Abs.EAdd exp1 exp2 -> failure x
  Language.Frontend.Language.Abs.ESub exp1 exp2 -> failure x
  Language.Frontend.Language.Abs.EMul exp1 exp2 -> failure x
  Language.Frontend.Language.Abs.EDiv exp1 exp2 -> failure x
  Language.Frontend.Language.Abs.Call ident exps -> failure x
  Language.Frontend.Language.Abs.EInt integer -> failure x
  Language.Frontend.Language.Abs.EVar ident -> failure x
