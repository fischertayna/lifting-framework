-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Language/Frontend/Language/Par.y
-----------------------------------------------------------------------------

state 67 contains 2 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pFunction -> Function                       (1)
	%start_pListFunction -> ListFunction               (2)
	%start_pListIdent -> ListIdent                     (3)
	%start_pListExp -> ListExp                         (4)
	%start_pExp1 -> Exp1                               (5)
	%start_pExp2 -> Exp2                               (6)
	%start_pExp3 -> Exp3                               (7)
	%start_pExp4 -> Exp4                               (8)
	%start_pExp -> Exp                                 (9)
	Ident -> L_Ident                                   (10)
	Integer -> L_integ                                 (11)
	Program -> ListFunction                            (12)
	Function -> Ident '(' ListIdent ')' '{' Exp '}'    (13)
	ListFunction ->                                    (14)
	ListFunction -> Function ListFunction              (15)
	ListIdent ->                                       (16)
	ListIdent -> Ident                                 (17)
	ListIdent -> Ident ',' ListIdent                   (18)
	ListExp ->                                         (19)
	ListExp -> Exp                                     (20)
	ListExp -> Exp ',' ListExp                         (21)
	Exp1 -> 'if' '(' Exp1 ')' 'then' Exp1 'else' Exp1   (22)
	Exp1 -> Exp1 '+' Exp2                              (23)
	Exp1 -> Exp1 '-' Exp2                              (24)
	Exp1 -> Exp2                                       (25)
	Exp2 -> Exp2 '*' Exp3                              (26)
	Exp2 -> Exp2 '/' Exp3                              (27)
	Exp2 -> Exp3                                       (28)
	Exp3 -> Ident '(' ListExp ')'                      (29)
	Exp3 -> Exp4                                       (30)
	Exp4 -> Integer                                    (31)
	Exp4 -> Ident                                      (32)
	Exp4 -> '(' Exp ')'                                (33)
	Exp -> Exp1                                        (34)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'/'            { PT _ (TS _ 7) }
	'else'         { PT _ (TS _ 8) }
	'if'           { PT _ (TS _ 9) }
	'then'         { PT _ (TS _ 10) }
	'{'            { PT _ (TS _ 11) }
	'}'            { PT _ (TS _ 12) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pFunction rule  1
	%start_pListFunction rule  2
	%start_pListIdent rule  3
	%start_pListExp rule  4
	%start_pExp1    rule  5
	%start_pExp2    rule  6
	%start_pExp3    rule  7
	%start_pExp4    rule  8
	%start_pExp     rule  9
	Ident           rule  10
	Integer         rule  11
	Program         rule  12
	Function        rule  13
	ListFunction    rules 14, 15
	ListIdent       rules 16, 17, 18
	ListExp         rules 19, 20, 21
	Exp1            rules 22, 23, 24, 25
	Exp2            rules 26, 27, 28
	Exp3            rules 29, 30
	Exp4            rules 31, 32, 33
	Exp             rule  34

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Ident        shift, and enter state 11
	%eof           reduce using rule 14

	Ident          goto state 31
	Program        goto state 35
	Function       goto state 32
	ListFunction   goto state 36

State 1

	%start_pFunction -> . Function                      (rule 1)

	L_Ident        shift, and enter state 11

	Ident          goto state 31
	Function       goto state 34

State 2

	%start_pListFunction -> . ListFunction              (rule 2)

	L_Ident        shift, and enter state 11
	%eof           reduce using rule 14

	Ident          goto state 31
	Function       goto state 32
	ListFunction   goto state 33

State 3

	%start_pListIdent -> . ListIdent                    (rule 3)

	L_Ident        shift, and enter state 11
	%eof           reduce using rule 16

	Ident          goto state 29
	ListIdent      goto state 30

State 4

	%start_pListExp -> . ListExp                        (rule 4)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21
	%eof           reduce using rule 19

	Ident          goto state 12
	Integer        goto state 13
	ListExp        goto state 27
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 28

State 5

	%start_pExp1 -> . Exp1                              (rule 5)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 26
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17

State 6

	%start_pExp2 -> . Exp2                              (rule 6)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp2           goto state 25
	Exp3           goto state 16
	Exp4           goto state 17

State 7

	%start_pExp3 -> . Exp3                              (rule 7)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp3           goto state 24
	Exp4           goto state 17

State 8

	%start_pExp4 -> . Exp4                              (rule 8)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 22
	Integer        goto state 13
	Exp4           goto state 23

State 9

	%start_pExp -> . Exp                                (rule 9)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 18

State 10

	Ident -> . L_Ident                                  (rule 10)

	L_Ident        shift, and enter state 11


State 11

	Ident -> L_Ident .                                  (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10
	'*'            reduce using rule 10
	'+'            reduce using rule 10
	','            reduce using rule 10
	'-'            reduce using rule 10
	'/'            reduce using rule 10
	'else'         reduce using rule 10
	'}'            reduce using rule 10
	%eof           reduce using rule 10


State 12

	Exp3 -> Ident . '(' ListExp ')'                     (rule 29)
	Exp4 -> Ident .                                     (rule 32)

	'('            shift, and enter state 47
	')'            reduce using rule 32
	'*'            reduce using rule 32
	'+'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'/'            reduce using rule 32
	'else'         reduce using rule 32
	'}'            reduce using rule 32
	%eof           reduce using rule 32


State 13

	Exp4 -> Integer .                                   (rule 31)

	')'            reduce using rule 31
	'*'            reduce using rule 31
	'+'            reduce using rule 31
	','            reduce using rule 31
	'-'            reduce using rule 31
	'/'            reduce using rule 31
	'else'         reduce using rule 31
	'}'            reduce using rule 31
	%eof           reduce using rule 31


State 14

	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)
	Exp -> Exp1 .                                       (rule 34)

	')'            reduce using rule 34
	'+'            shift, and enter state 41
	','            reduce using rule 34
	'-'            shift, and enter state 42
	'}'            reduce using rule 34
	%eof           reduce using rule 34


State 15

	Exp1 -> Exp2 .                                      (rule 25)
	Exp2 -> Exp2 . '*' Exp3                             (rule 26)
	Exp2 -> Exp2 . '/' Exp3                             (rule 27)

	')'            reduce using rule 25
	'*'            shift, and enter state 43
	'+'            reduce using rule 25
	','            reduce using rule 25
	'-'            reduce using rule 25
	'/'            shift, and enter state 44
	'else'         reduce using rule 25
	'}'            reduce using rule 25
	%eof           reduce using rule 25


State 16

	Exp2 -> Exp3 .                                      (rule 28)

	')'            reduce using rule 28
	'*'            reduce using rule 28
	'+'            reduce using rule 28
	','            reduce using rule 28
	'-'            reduce using rule 28
	'/'            reduce using rule 28
	'else'         reduce using rule 28
	'}'            reduce using rule 28
	%eof           reduce using rule 28


State 17

	Exp3 -> Exp4 .                                      (rule 30)

	')'            reduce using rule 30
	'*'            reduce using rule 30
	'+'            reduce using rule 30
	','            reduce using rule 30
	'-'            reduce using rule 30
	'/'            reduce using rule 30
	'else'         reduce using rule 30
	'}'            reduce using rule 30
	%eof           reduce using rule 30


State 18

	%start_pExp -> Exp .                                (rule 9)

	%eof           accept


State 19

	Exp4 -> '(' . Exp ')'                               (rule 33)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 46

State 20

	Exp1 -> 'if' . '(' Exp1 ')' 'then' Exp1 'else' Exp1    (rule 22)

	'('            shift, and enter state 45


State 21

	Integer -> L_integ .                                (rule 11)

	')'            reduce using rule 11
	'*'            reduce using rule 11
	'+'            reduce using rule 11
	','            reduce using rule 11
	'-'            reduce using rule 11
	'/'            reduce using rule 11
	'else'         reduce using rule 11
	'}'            reduce using rule 11
	%eof           reduce using rule 11


State 22

	Exp4 -> Ident .                                     (rule 32)

	%eof           reduce using rule 32


State 23

	%start_pExp4 -> Exp4 .                              (rule 8)

	%eof           accept


State 24

	%start_pExp3 -> Exp3 .                              (rule 7)

	%eof           accept


State 25

	%start_pExp2 -> Exp2 .                              (rule 6)
	Exp2 -> Exp2 . '*' Exp3                             (rule 26)
	Exp2 -> Exp2 . '/' Exp3                             (rule 27)

	'*'            shift, and enter state 43
	'/'            shift, and enter state 44
	%eof           accept


State 26

	%start_pExp1 -> Exp1 .                              (rule 5)
	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	%eof           accept


State 27

	%start_pListExp -> ListExp .                        (rule 4)

	%eof           accept


State 28

	ListExp -> Exp .                                    (rule 20)
	ListExp -> Exp . ',' ListExp                        (rule 21)

	')'            reduce using rule 20
	','            shift, and enter state 40
	%eof           reduce using rule 20


State 29

	ListIdent -> Ident .                                (rule 17)
	ListIdent -> Ident . ',' ListIdent                  (rule 18)

	')'            reduce using rule 17
	','            shift, and enter state 39
	%eof           reduce using rule 17


State 30

	%start_pListIdent -> ListIdent .                    (rule 3)

	%eof           accept


State 31

	Function -> Ident . '(' ListIdent ')' '{' Exp '}'    (rule 13)

	'('            shift, and enter state 38


State 32

	ListFunction -> Function . ListFunction             (rule 15)

	L_Ident        shift, and enter state 11
	%eof           reduce using rule 14

	Ident          goto state 31
	Function       goto state 32
	ListFunction   goto state 37

State 33

	%start_pListFunction -> ListFunction .              (rule 2)

	%eof           accept


State 34

	%start_pFunction -> Function .                      (rule 1)

	%eof           accept


State 35

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 36

	Program -> ListFunction .                           (rule 12)

	%eof           reduce using rule 12


State 37

	ListFunction -> Function ListFunction .             (rule 15)

	%eof           reduce using rule 15


State 38

	Function -> Ident '(' . ListIdent ')' '{' Exp '}'    (rule 13)

	')'            reduce using rule 16
	L_Ident        shift, and enter state 11

	Ident          goto state 29
	ListIdent      goto state 57

State 39

	ListIdent -> Ident ',' . ListIdent                  (rule 18)

	')'            reduce using rule 16
	L_Ident        shift, and enter state 11
	%eof           reduce using rule 16

	Ident          goto state 29
	ListIdent      goto state 56

State 40

	ListExp -> Exp ',' . ListExp                        (rule 21)

	'('            shift, and enter state 19
	')'            reduce using rule 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21
	%eof           reduce using rule 19

	Ident          goto state 12
	Integer        goto state 13
	ListExp        goto state 55
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 28

State 41

	Exp1 -> Exp1 '+' . Exp2                             (rule 23)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp2           goto state 54
	Exp3           goto state 16
	Exp4           goto state 17

State 42

	Exp1 -> Exp1 '-' . Exp2                             (rule 24)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp2           goto state 53
	Exp3           goto state 16
	Exp4           goto state 17

State 43

	Exp2 -> Exp2 '*' . Exp3                             (rule 26)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp3           goto state 52
	Exp4           goto state 17

State 44

	Exp2 -> Exp2 '/' . Exp3                             (rule 27)

	'('            shift, and enter state 19
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp3           goto state 51
	Exp4           goto state 17

State 45

	Exp1 -> 'if' '(' . Exp1 ')' 'then' Exp1 'else' Exp1    (rule 22)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 50
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17

State 46

	Exp4 -> '(' Exp . ')'                               (rule 33)

	')'            shift, and enter state 49


State 47

	Exp3 -> Ident '(' . ListExp ')'                     (rule 29)

	'('            shift, and enter state 19
	')'            reduce using rule 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	ListExp        goto state 48
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 28

State 48

	Exp3 -> Ident '(' ListExp . ')'                     (rule 29)

	')'            shift, and enter state 60


State 49

	Exp4 -> '(' Exp ')' .                               (rule 33)

	')'            reduce using rule 33
	'*'            reduce using rule 33
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'/'            reduce using rule 33
	'else'         reduce using rule 33
	'}'            reduce using rule 33
	%eof           reduce using rule 33


State 50

	Exp1 -> 'if' '(' Exp1 . ')' 'then' Exp1 'else' Exp1    (rule 22)
	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)

	')'            shift, and enter state 59
	'+'            shift, and enter state 41
	'-'            shift, and enter state 42


State 51

	Exp2 -> Exp2 '/' Exp3 .                             (rule 27)

	')'            reduce using rule 27
	'*'            reduce using rule 27
	'+'            reduce using rule 27
	','            reduce using rule 27
	'-'            reduce using rule 27
	'/'            reduce using rule 27
	'else'         reduce using rule 27
	'}'            reduce using rule 27
	%eof           reduce using rule 27


State 52

	Exp2 -> Exp2 '*' Exp3 .                             (rule 26)

	')'            reduce using rule 26
	'*'            reduce using rule 26
	'+'            reduce using rule 26
	','            reduce using rule 26
	'-'            reduce using rule 26
	'/'            reduce using rule 26
	'else'         reduce using rule 26
	'}'            reduce using rule 26
	%eof           reduce using rule 26


State 53

	Exp1 -> Exp1 '-' Exp2 .                             (rule 24)
	Exp2 -> Exp2 . '*' Exp3                             (rule 26)
	Exp2 -> Exp2 . '/' Exp3                             (rule 27)

	')'            reduce using rule 24
	'*'            shift, and enter state 43
	'+'            reduce using rule 24
	','            reduce using rule 24
	'-'            reduce using rule 24
	'/'            shift, and enter state 44
	'else'         reduce using rule 24
	'}'            reduce using rule 24
	%eof           reduce using rule 24


State 54

	Exp1 -> Exp1 '+' Exp2 .                             (rule 23)
	Exp2 -> Exp2 . '*' Exp3                             (rule 26)
	Exp2 -> Exp2 . '/' Exp3                             (rule 27)

	')'            reduce using rule 23
	'*'            shift, and enter state 43
	'+'            reduce using rule 23
	','            reduce using rule 23
	'-'            reduce using rule 23
	'/'            shift, and enter state 44
	'else'         reduce using rule 23
	'}'            reduce using rule 23
	%eof           reduce using rule 23


State 55

	ListExp -> Exp ',' ListExp .                        (rule 21)

	')'            reduce using rule 21
	%eof           reduce using rule 21


State 56

	ListIdent -> Ident ',' ListIdent .                  (rule 18)

	')'            reduce using rule 18
	%eof           reduce using rule 18


State 57

	Function -> Ident '(' ListIdent . ')' '{' Exp '}'    (rule 13)

	')'            shift, and enter state 58


State 58

	Function -> Ident '(' ListIdent ')' . '{' Exp '}'    (rule 13)

	'{'            shift, and enter state 62


State 59

	Exp1 -> 'if' '(' Exp1 ')' . 'then' Exp1 'else' Exp1    (rule 22)

	'then'         shift, and enter state 61


State 60

	Exp3 -> Ident '(' ListExp ')' .                     (rule 29)

	')'            reduce using rule 29
	'*'            reduce using rule 29
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'/'            reduce using rule 29
	'else'         reduce using rule 29
	'}'            reduce using rule 29
	%eof           reduce using rule 29


State 61

	Exp1 -> 'if' '(' Exp1 ')' 'then' . Exp1 'else' Exp1    (rule 22)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 64
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17

State 62

	Function -> Ident '(' ListIdent ')' '{' . Exp '}'    (rule 13)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 14
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17
	Exp            goto state 63

State 63

	Function -> Ident '(' ListIdent ')' '{' Exp . '}'    (rule 13)

	'}'            shift, and enter state 66


State 64

	Exp1 -> 'if' '(' Exp1 ')' 'then' Exp1 . 'else' Exp1    (rule 22)
	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)

	'+'            shift, and enter state 41
	'-'            shift, and enter state 42
	'else'         shift, and enter state 65


State 65

	Exp1 -> 'if' '(' Exp1 ')' 'then' Exp1 'else' . Exp1    (rule 22)

	'('            shift, and enter state 19
	'if'           shift, and enter state 20
	L_Ident        shift, and enter state 11
	L_integ        shift, and enter state 21

	Ident          goto state 12
	Integer        goto state 13
	Exp1           goto state 67
	Exp2           goto state 15
	Exp3           goto state 16
	Exp4           goto state 17

State 66

	Function -> Ident '(' ListIdent ')' '{' Exp '}' .    (rule 13)

	L_Ident        reduce using rule 13
	%eof           reduce using rule 13


State 67

	Exp1 -> 'if' '(' Exp1 ')' 'then' Exp1 'else' Exp1 .    (rule 22)
	Exp1 -> Exp1 . '+' Exp2                             (rule 23)
	Exp1 -> Exp1 . '-' Exp2                             (rule 24)

	')'            reduce using rule 22
	'+'            shift, and enter state 41
			(reduce using rule 22)

	','            reduce using rule 22
	'-'            shift, and enter state 42
			(reduce using rule 22)

	'else'         reduce using rule 22
	'}'            reduce using rule 22
	%eof           reduce using rule 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 35
Number of terminals: 14
Number of non-terminals: 22
Number of states: 68
