-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Language.Frontend.SkelLanguage where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Language.Frontend.AbsLanguage

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Language.Frontend.AbsLanguage.Ident -> Result
transIdent x = case x of
  Language.Frontend.AbsLanguage.Ident string -> failure x

transProgram :: Language.Frontend.AbsLanguage.Program -> Result
transProgram x = case x of
  Language.Frontend.AbsLanguage.Prog functions -> failure x

transDecl :: Language.Frontend.AbsLanguage.Decl -> Result
transDecl x = case x of
  Language.Frontend.AbsLanguage.Dec ident types -> failure x

transFunction :: Language.Frontend.AbsLanguage.Function -> Result
transFunction x = case x of
  Language.Frontend.AbsLanguage.Fun decl ident idents exp -> failure x

transExp :: Language.Frontend.AbsLanguage.Exp -> Result
transExp x = case x of
  Language.Frontend.AbsLanguage.EIf exp1 exp2 exp3 -> failure x
  Language.Frontend.AbsLanguage.EOr exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.EAnd exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.ENot exp -> failure x
  Language.Frontend.AbsLanguage.ECon exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.EAdd exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.ESub exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.EMul exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.EDiv exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.Call ident exps -> failure x
  Language.Frontend.AbsLanguage.EInt integer -> failure x
  Language.Frontend.AbsLanguage.EVar ident -> failure x
  Language.Frontend.AbsLanguage.EStr string -> failure x
  Language.Frontend.AbsLanguage.EPair exp1 exp2 -> failure x
  Language.Frontend.AbsLanguage.EList exps -> failure x
  Language.Frontend.AbsLanguage.ETrue -> failure x
  Language.Frontend.AbsLanguage.EFalse -> failure x

transType :: Language.Frontend.AbsLanguage.Type -> Result
transType x = case x of
  Language.Frontend.AbsLanguage.Tbool -> failure x
  Language.Frontend.AbsLanguage.Tint -> failure x
  Language.Frontend.AbsLanguage.TStr -> failure x
  Language.Frontend.AbsLanguage.TFun function -> failure x
  Language.Frontend.AbsLanguage.TPair type_1 type_2 -> failure x
  Language.Frontend.AbsLanguage.TList type_ -> failure x
