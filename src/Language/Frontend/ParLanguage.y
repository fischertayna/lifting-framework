-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Language.Frontend.ParLanguage
  ( happyError
  , myLexer
  , pProgram
  , pDecl
  , pFunction
  , pListFunction
  , pListType
  , pListIdent
  , pListExp
  , pExp
  , pExp1
  , pExp2
  , pExp3
  , pExp4
  , pExp5
  , pExp6
  , pExp7
  , pType
  ) where

import Prelude

import qualified Language.Frontend.AbsLanguage
import Language.Frontend.LexLanguage

}

%name pProgram Program
%name pDecl Decl
%name pFunction Function
%name pListFunction ListFunction
%name pListType ListType
%name pListIdent ListIdent
%name pListExp ListExp
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pType Type
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '&&'     { PT _ (TS _ 2)  }
  '('      { PT _ (TS _ 3)  }
  ')'      { PT _ (TS _ 4)  }
  '*'      { PT _ (TS _ 5)  }
  '+'      { PT _ (TS _ 6)  }
  '++'     { PT _ (TS _ 7)  }
  ','      { PT _ (TS _ 8)  }
  '-'      { PT _ (TS _ 9)  }
  '->'     { PT _ (TS _ 10) }
  '/'      { PT _ (TS _ 11) }
  '::'     { PT _ (TS _ 12) }
  'Any'    { PT _ (TS _ 13) }
  'False'  { PT _ (TS _ 14) }
  'String' { PT _ (TS _ 15) }
  'True'   { PT _ (TS _ 16) }
  '['      { PT _ (TS _ 17) }
  ']'      { PT _ (TS _ 18) }
  'bool'   { PT _ (TS _ 19) }
  'else'   { PT _ (TS _ 20) }
  'if'     { PT _ (TS _ 21) }
  'int'    { PT _ (TS _ 22) }
  'then'   { PT _ (TS _ 23) }
  '{'      { PT _ (TS _ 24) }
  '||'     { PT _ (TS _ 25) }
  '}'      { PT _ (TS _ 26) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }

%%

Ident :: { Language.Frontend.AbsLanguage.Ident }
Ident  : L_Ident { Language.Frontend.AbsLanguage.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { Language.Frontend.AbsLanguage.Program }
Program : ListFunction { Language.Frontend.AbsLanguage.Prog $1 }

Decl :: { Language.Frontend.AbsLanguage.Decl }
Decl
  : Ident '::' ListType { Language.Frontend.AbsLanguage.Dec $1 $3 }

Function :: { Language.Frontend.AbsLanguage.Function }
Function
  : Decl Ident '(' ListIdent ')' '{' Exp '}' { Language.Frontend.AbsLanguage.Fun $1 $2 $4 $7 }

ListFunction :: { [Language.Frontend.AbsLanguage.Function] }
ListFunction
  : {- empty -} { [] } | Function ListFunction { (:) $1 $2 }

ListType :: { [Language.Frontend.AbsLanguage.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type '->' ListType { (:) $1 $3 }

ListIdent :: { [Language.Frontend.AbsLanguage.Ident] }
ListIdent
  : {- empty -} { [] }
  | Ident { (:[]) $1 }
  | Ident ',' ListIdent { (:) $1 $3 }

ListExp :: { [Language.Frontend.AbsLanguage.Exp] }
ListExp
  : {- empty -} { [] }
  | Exp { (:[]) $1 }
  | Exp ',' ListExp { (:) $1 $3 }

Exp :: { Language.Frontend.AbsLanguage.Exp }
Exp
  : 'if' '(' Exp ')' 'then' Exp 'else' Exp { Language.Frontend.AbsLanguage.EIf $3 $6 $8 }
  | Exp1 { $1 }

Exp1 :: { Language.Frontend.AbsLanguage.Exp }
Exp1
  : Exp1 '||' Exp2 { Language.Frontend.AbsLanguage.EOr $1 $3 }
  | Exp2 { $1 }

Exp2 :: { Language.Frontend.AbsLanguage.Exp }
Exp2
  : Exp2 '&&' Exp3 { Language.Frontend.AbsLanguage.EAnd $1 $3 }
  | Exp3 { $1 }

Exp3 :: { Language.Frontend.AbsLanguage.Exp }
Exp3
  : '!' Exp3 { Language.Frontend.AbsLanguage.ENot $2 } | Exp4 { $1 }

Exp4 :: { Language.Frontend.AbsLanguage.Exp }
Exp4
  : Exp4 '++' Exp5 { Language.Frontend.AbsLanguage.ECon $1 $3 }
  | Exp4 '+' Exp5 { Language.Frontend.AbsLanguage.EAdd $1 $3 }
  | Exp4 '-' Exp5 { Language.Frontend.AbsLanguage.ESub $1 $3 }
  | Exp5 { $1 }

Exp5 :: { Language.Frontend.AbsLanguage.Exp }
Exp5
  : Exp5 '*' Exp6 { Language.Frontend.AbsLanguage.EMul $1 $3 }
  | Exp5 '/' Exp6 { Language.Frontend.AbsLanguage.EDiv $1 $3 }
  | Exp6 { $1 }

Exp6 :: { Language.Frontend.AbsLanguage.Exp }
Exp6
  : Ident '(' ListExp ')' { Language.Frontend.AbsLanguage.Call $1 $3 }
  | Exp7 { $1 }

Exp7 :: { Language.Frontend.AbsLanguage.Exp }
Exp7
  : Integer { Language.Frontend.AbsLanguage.EInt $1 }
  | Ident { Language.Frontend.AbsLanguage.EVar $1 }
  | String { Language.Frontend.AbsLanguage.EStr $1 }
  | '(' Exp ',' Exp ')' { Language.Frontend.AbsLanguage.EPair $2 $4 }
  | '[' ListExp ']' { Language.Frontend.AbsLanguage.EList $2 }
  | 'True' { Language.Frontend.AbsLanguage.ETrue }
  | 'False' { Language.Frontend.AbsLanguage.EFalse }
  | '(' Exp ')' { $2 }

Type :: { Language.Frontend.AbsLanguage.Type }
Type
  : 'bool' { Language.Frontend.AbsLanguage.Tbool }
  | 'int' { Language.Frontend.AbsLanguage.Tint }
  | 'String' { Language.Frontend.AbsLanguage.TStr }
  | 'Any' { Language.Frontend.AbsLanguage.TAny }
  | Function { Language.Frontend.AbsLanguage.TFun $1 }
  | '(' Type ',' Type ')' { Language.Frontend.AbsLanguage.TPair $2 $4 }
  | '[' Type ']' { Language.Frontend.AbsLanguage.TList $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

