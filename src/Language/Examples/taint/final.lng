main :: Any -> [String]
main (prog) {
    final (prog)
}

final :: Any -> [String]
final (prog) {
    if (checkType(prog, "ASGN"))
    then [getLabelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then final(getSndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then final(getThenFromIf(getStmt(prog))) ++ final(getElseFromIf(getStmt(prog)))
            else if (checkType(prog, "WHILE"))
                then [getLabelFromWhile(getStmt(prog))]
                else if (checkType(prog, "SKIP"))
                    then [getLabelFromSkip(getStmt(prog))]
                    else ["error"]
}

getTypeStmt :: Any -> String
getTypeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(getTypeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

getLabelFromAsgn :: Any -> String
getLabelFromAsgn (asgn) {
    fst(asgn)
}

getLabelFromSkip :: Any -> String
getLabelFromSkip (skip) {
    fst(skip)
}

getFstStmtOfSeq :: Any -> Any
getFstStmtOfSeq (seq) {
    fst(seq)
}

getSndStmtOfSeq :: Any -> Any
getSndStmtOfSeq (seq) {
    snd(seq)
}

getLabelFromIf :: Any -> String
getLabelFromIf (stm) {
    snd(fst(stm))
}

getThenFromIf :: Any -> Any
getThenFromIf (stm) {
    fst(snd(stm))
}

getElseFromIf :: Any -> Any
getElseFromIf (stm) {
    snd(snd(stm))
}

getLabelFromWhile :: Any -> String
getLabelFromWhile (stm) {
    snd(fst(stm))
}
