main :: Any -> [(String, String)]
main (input) {
    killRD (fst(input), assignments(snd(input)))
}

killRD :: Any -> [(String, String)] -> [(String, String)]
killRD (block, assignments) {
    if (isEqual (fst (block), "ASGN"))
        then union([((fst (snd (snd (block)))), "?")], filterRD(fst(snd(snd(block))), fst(snd(block)), assignments))
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (checkType(prog, "ASGN"))
        then [(varFromAsgn(getStmt(prog)), labelFromAsgn(getStmt(prog)))]
        else if (checkType(prog, "SEQ"))
            then union(assignments(fstStmtOfSeq(getStmt(prog))), assignments(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(assignments(thenFromIf(getStmt(prog))), assignments(elseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then assignments(blockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then union([head (assigns)], filterRD(var, l, tail(assigns)))
            else filterRD(var, l, tail(assigns))
}


filterRDv2 :: String -> String -> [(String, int)] -> [(String, int)]
filterRDv2 (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then if (isEqual(snd(head (assigns)), l))
                then filterRDv2(var, l, tail(assigns))
                else [head (assigns)] ++ filterRDv2(var, l, tail(assigns)) 
            else filterRDv2(var, l, tail(assigns))
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    fst(stm)
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(snd(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(snd(stm)))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(snd(stm)))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    fst(stm)
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(snd(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(snd(stm))
}