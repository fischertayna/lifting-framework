main :: Any -> [(String, String)]
main (input) {
    killRD (fst(input), assignments(snd(input)))
}

killRD :: Any -> [(String, String)] -> [(String, String)]
killRD (block, assignments) {
    if (isEqual (fst (block), "ASGN"))
        then union([((fst (snd (snd (block)))), "?")], filterRD(fst(snd(snd(block))), fst(snd(block)), assignments))
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else if (isEqual (fst (prog), "SEQ"))
            then union(assignments(fst(snd (prog))), assignments(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(assignments (fst (snd (snd (prog)))), assignments (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then assignments(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then union([head (assigns)], filterRD(var, l, tail(assigns)))
            else filterRD(var, l, tail(assigns))
}


filterRDv2 :: String -> String -> [(String, int)] -> [(String, int)]
filterRDv2 (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then if (isEqual(snd(head (assigns)), l))
                then filterRDv2(var, l, tail(assigns))
                else [head (assigns)] ++ filterRDv2(var, l, tail(assigns)) 
            else filterRDv2(var, l, tail(assigns))
}