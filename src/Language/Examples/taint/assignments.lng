main :: Any -> [(String, String)]
main (prog) {
    assignments (prog)
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (checkType(prog, "ASGN"))
        then [(varFromAsgn(getStmt(prog)), labelFromAsgn(getStmt(prog)))]
        else if (checkType(prog, "SEQ"))
            then union(assignments(fstStmtOfSeq(getStmt(prog))), assignments(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(assignments(thenFromIf(getStmt(prog))), assignments(elseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then assignments(blockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    fst(stm)
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(snd(stm)))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(snd(stm)))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    fst(stm)
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(snd(stm))
}
