main :: Any -> [Any]
main (prog) {
    updateMappings(prog, labels(prog), ([],[]))
}

updateMappings :: Any -> [String] -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappings(prog, labels, mappings) {
    if (isNil(labels))
        then mappings
        else updateMappings(prog, tail(labels), updateMappingsForLabel(prog, head(labels), mappings))
}

updateMappingsForLabel :: Any -> String -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappingsForLabel(prog, l, old) {
    (insertIntoMap(l, rdEntry(l, prog, snd(old)), fst(old)), insertIntoMap(l, rdExit(l, prog, fst(old)), snd(old)))
}

insertIntoMap :: int -> [(String, int)] -> [(int, [(String, int)])] -> [(int, [(String, int)])]
insertIntoMap (key, value, map) {
    if (isNil(map))
        then [(key, value)]
        else if (isEqual(fst(head(map)), key))
            then [(key, snd(head(map)) ++ value)] ++ tail(map)
            else [head(map)] ++ insertIntoMap(key, value, tail(map))
}

rdEntry :: int -> Any -> [(int, [(String, int)])] -> [(String, int)]
rdEntry (l, prog, exit) {
    if (isEqual (l, init(prog)))
        then makeSetOfFV(fv(prog))
        else findInExit(filterFlow(l, flow(prog)), exit)
}

makeSetOfFV :: [String] -> [(String, int)]
makeSetOfFV (fvs) {
    if (isNil(fvs))
        then []
        else [(head (fvs), 0 - 1)] ++ makeSetOfFV(tail(fvs))
}

findInExit :: [(int, int)] -> [(int, [(String, int)])] -> [(String, int)]
findInExit (fl, exit) {
    if (isNil(fl))
        then []
        else findOrDefault(fst(head (fl)), exit) ++ findInExit(tail(fl), exit)
}

findOrDefault :: int -> [(int, [(String, int)])] -> [(String, int)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


filterFlow :: int -> [(int, int)] -> [(int, int)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then [head (fl)] ++ filterFlow(l, tail(fl))
            else filterFlow(l, tail(fl))
}

fv :: Any -> [String]
fv (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then union ([fst (snd (snd (prog)))], getVarFromAExp(snd (snd (snd (prog)))))
        else if (isEqual (fst (prog), "SEQ"))
            then union(fv(fst(snd (prog))), fv(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(fv (fst (snd (snd (prog)))), fv (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then fv(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}


getVarFromAExp :: Any -> [Any]
getVarFromAExp (aexp) {
    if (isEqual (fst (aexp), "VAR"))
        then [snd (aexp)]
        else if (isEqual (fst (aexp), "CONST"))
            then []
            else getVarFromAExp(fst (snd(aexp))) ++ getVarFromAExp(snd (snd(aexp)))

}

flow :: Any -> [(int, int)]
flow (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then []
        else if (isEqual (fst (prog), "SEQ"))
            then union(flow(fst(snd (prog))), union(makeSetOfLabels(init(snd(snd(prog))), final(fst(snd (prog)))), flow(snd (snd (prog)))))
            else if (isEqual (fst (prog), "IF"))
                then union([(snd (fst (snd (prog))), init(fst (snd (snd (prog)))))], union(flow (fst (snd (snd (prog)))), union([(snd (fst (snd (prog))), init(snd (snd (snd (prog)))))], flow (snd (snd (snd (prog)))))))
                else if (isEqual (fst (prog), "WHILE"))
                    then union([(snd (fst (snd (prog))), init(snd (snd (prog))))], union(flow(snd(snd (prog))), makeSetOfLabels(snd (fst (snd (prog))), final(snd (snd (prog))))))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

makeSetOfLabels :: int -> [int] -> [(int, int)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else [(head (finals), init)] ++ makeSetOfLabels(init, tail(finals))
}


init :: Any -> int
init (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then fst (snd (prog))
    else if (isEqual (fst (prog), "SEQ"))
        then init (fst (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then snd (fst (snd (prog)))
            else if (isEqual (fst (prog), "WHILE"))
                then snd (fst (snd (prog)))
                else if (isEqual (fst (prog), "SKIP"))
                    then fst (snd (prog))
                    else ("error " ++ fst (prog))
}

final :: Any -> [int]
final (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then [fst (snd (prog))]
    else if (isEqual (fst (prog), "SEQ"))
        then final (snd (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then (final (fst (snd (snd (prog))))) ++ (final (snd (snd (snd (prog)))))
            else if (isEqual (fst (prog), "WHILE"))
                then [snd (fst (snd (prog)))]
                else if (isEqual (fst (prog), "SKIP"))
                    then [fst (snd (prog))]
                    else ["error" ++ fst (prog)]
}

rdExit :: int -> Any -> [(int, [(String, int)])] -> [(String, int)]
rdExit (l, prog, entry) {
    rdExitWithBlock(l, prog, entry, head(findBlock(l, prog)))
}

rdExitWithBlock :: int -> Any -> [(int, [(String, int)])] -> [(String, int)]
rdExitWithBlock (l, prog, entry, block) {
    union(difference(findOrDefault(l, entry), killRD(block, assigments(prog))), genRD(block))
}

findBlock :: int -> Any -> [Any]
findBlock (l, prog) {
    if (isEqual (fst (prog), "ASGN"))
        then if (isEqual (fst (snd (prog)), l))
            then [prog]
            else []
        else if (isEqual (fst (prog), "SEQ"))
            then union(findBlock(l, fst(snd (prog))), findBlock(l, snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then if (isEqual (snd (fst (snd (prog))), l))
                    then [fst (fst (snd (prog)))]
                    else union(findBlock(l, fst(snd (snd (prog)))), findBlock(l, snd(snd(snd(prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then if (isEqual (snd (fst (snd (prog))), l))
                        then [fst (fst (snd (prog)))] 
                        else findBlock(l, snd(snd (prog)))
                    else []
}

findOrDefault :: int -> [(int, [(String, int)])] -> [(String, int)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


killRD :: Any -> [(String, int)] -> [(String, int)]
killRD (block, assigments) {
    if (isEqual (fst (block), "ASGN"))
        then union([((fst (snd (snd (block)))), 0 - 1)], filterRD(fst(snd(snd(block))), fst(snd(block)), assigments))
        else []
}

assigments :: Any -> [(String, int)]
assigments (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else if (isEqual (fst (prog), "SEQ"))
            then union(assigments(fst(snd (prog))), assigments(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(assigments (fst (snd (snd (prog)))), assigments (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then assigments(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

filterRD :: String -> int -> [(String, int)] -> [(String, int)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then [head (assigns)] ++ filterRD(var, l, tail(assigns))
            else filterRD(var, l, tail(assigns))
}

genRD :: Any -> [(String, int)]
genRD (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else []
}

labels :: Any -> [int]
labels (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then [fst (snd (prog))]
    else if (isEqual (fst (prog), "SEQ"))
        then labels (fst (snd (prog))) ++ labels (snd (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then [snd (fst (snd (prog)))] ++ union(labels (fst (snd (snd (prog)))), labels (snd (snd (snd (prog)))))
            else if (isEqual (fst (prog), "WHILE"))
                then [snd (fst (snd (prog)))] ++ labels(snd(snd (prog)))
                else if (isEqual (fst (prog), "SKIP"))
                    then []
                    else []
}