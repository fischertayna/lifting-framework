main :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
main (input) {
    reachingDefinitions (fst(input), snd(input))
}

reachingDefinitions :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
reachingDefinitions(tries, prog) {
    chaoticIteration(tries, prog, ([], []))
}

chaoticIteration :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticIteration (tries, prog, x) {
    if (isEqual(tries, 0))
        then x
        else chaoticRecursion(tries - 1, prog, f(prog, x), x)
}

chaoticRecursion :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticRecursion (tries, prog, y, x) {
    if (isEqual (y, x))
        then x
        else chaoticIteration (tries, prog, y)
}

f :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
f (prog, rd) {
    updateMappings(prog, labels(prog), rd)
}

updateMappings :: Any -> [String] -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappings(prog, labels, mappings) {
    if (isNil(labels))
        then mappings
        else updateMappings(prog, tail(labels), updateMappingsForLabel(prog, head(labels), mappings))
}

updateMappingsForLabel :: Any -> String -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappingsForLabel(prog, l, old) {
    (insertIntoMap(l, rdEntry(l, prog, snd(old)), fst(old)), insertIntoMap(l, rdExit(l, prog, fst(old)), snd(old)))
}

insertIntoMap :: String -> [(String, String)] -> [(String, [(String, String)])] -> [(String, [(String, String)])]
insertIntoMap (key, value, map) {
    if (isNil(map))
        then [(key, sortBySecond(value))]
        else if (isEqual(fst(head(map)), key))
            then [(key, sortBySecond(combineLists(value, snd(head(map)))))] ++ tail(map)
            else [head(map)] ++ insertIntoMap(key, value, tail(map))
}

combineLists :: [Any] -> [Any] -> [Any]
combineLists (l1, l2) {
    if (isNil(l1))
        then l2
        else combineLists(tail(l1), addUnique(head(l1), l2))
}

addUnique :: Any -> [Any] -> [Any]
addUnique (x, l) {
    if (elem(x, l))
        then l
        else l ++ [x] 
}

elem :: Any -> [Any] -> int
elem (x, l) {
    if (isNil(l))
        then 0
        else if (isEqual(head(l), x))
            then 1
            else elem(x, tail(l))
}

sortBySecond :: [(String, String)] -> [(String, String)]
sortBySecond (list) {
    if (isNil(list))
        then []
        else insertBySecond(head(list), sortBySecond(tail(list)))
}

insertBySecond :: (String, String) -> [(String, String)] -> [(String, String)]
insertBySecond(pair, sortedList) {
    if (isNil(sortedList))
        then [pair]
        else if (lt(snd(pair), snd(head(sortedList))))
            then [pair] ++ sortedList
            else if (isEqual(snd(pair), snd(head(sortedList))))
                then if (lt(fst(pair), fst(head(sortedList))))
                    then [pair] ++ sortedList
                    else [head(sortedList)] ++ insertBySecond(pair, tail(sortedList))
                else [head(sortedList)] ++ insertBySecond(pair, tail(sortedList))
}

rdEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdEntry (l, prog, exit) {
    if (isEqual (l, init(prog)))
        then makeSetOfFV(fv(prog))
        else findInExit(filterFlow(l, flow(prog)), exit)
}

makeSetOfFV :: [String] -> [(String, String)]
makeSetOfFV (fvs) {
    if (isNil(fvs))
        then []
        else [(head (fvs), "?")] ++ makeSetOfFV(tail(fvs))
}

findInExit :: [(String, String)] -> [(String, [(String, String)])] -> [(String, String)]
findInExit (fl, exit) {
    if (isNil(fl))
        then []
        else findOrDefault(fst(head (fl)), exit) ++ findInExit(tail(fl), exit)
}

findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


filterFlow :: String -> [(String, String)] -> [(String, String)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then [head (fl)] ++ filterFlow(l, tail(fl))
            else filterFlow(l, tail(fl))
}

fv :: Any -> [String]
fv (prog) {
    if (checkType(prog, "ASGN"))
        then union ([getVarFromAsgn(getStmt(prog))], getVarFromValue(getValueFromAsgn(getStmt(prog))))
        else if (checkType(prog, "SEQ"))
            then union(fv(getFstStmtOfSeq(getStmt(prog))), fv(getSndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(fv(getThenFromIf(getStmt(prog))), fv(getElseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then fv(getBlockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ getTypeStmt(prog)]
}

getVarFromValue :: Any -> [Any]
getVarFromValue (aexp) {
    if (checkType(aexp, "VAR"))
        then [snd (aexp)]
        else if (checkType(aexp, "CONST"))
            then []
            else getVarFromValue(getFstOpValue(aexp)) ++ getVarFromValue(getSndOpValue(aexp))
}

flow :: Any -> [(String, String)]
flow (prog) {
    if (checkType(prog, "ASGN"))
        then []
        else if (checkType(prog, "SEQ"))
            then union(flow(getFstStmtOfSeq(getStmt(prog))), union(makeSetOfLabels(init(getSndStmtOfSeq(getStmt(prog))), final(getFstStmtOfSeq(getStmt(prog)))), flow(getSndStmtOfSeq(getStmt(prog)))))
            else if (checkType(prog, "IF"))
                then union([(getLabelFromIf(getStmt(prog)), init(getThenFromIf(getStmt(prog))))], union(flow(getThenFromIf(getStmt(prog))), union([(getLabelFromIf(getStmt(prog)), init(getElseFromIf(getStmt(prog))))], flow(getElseFromIf(getStmt(prog))))))
                else if (checkType(prog, "WHILE"))
                    then union([(getLabelFromWhile(getStmt(prog)), init(getBlockFromWhile(getStmt(prog))))], union(flow(getBlockFromWhile(getStmt(prog))), makeSetOfLabels(getLabelFromWhile(getStmt(prog)), final(getBlockFromWhile(getStmt(prog))))))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ getTypeStmt(prog)]
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else [(head (finals), init)] ++ makeSetOfLabels(init, tail(finals))
}

init :: Any -> String
init (prog) {
    if (checkType(prog, "ASGN"))
    then getLabelFromAsgn(getStmt(prog))
    else if (checkType(prog, "SEQ"))
        then init (getFstStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then getLabelFromIf(getStmt(prog))
            else if (checkType(prog, "WHILE"))
                then getLabelFromWhile(getStmt(prog))
                else if (checkType(prog, "SKIP"))
                    then getLabelFromSkip(getStmt(prog))
                    else ("error " ++ getTypeStmt(prog))
}

final :: Any -> [String]
final (prog) {
    if (checkType(prog, "ASGN"))
    then [getLabelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then final(getSndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then final(getThenFromIf(getStmt(prog))) ++ final(getElseFromIf(getStmt(prog)))
            else if (checkType(prog, "WHILE"))
                then [getLabelFromWhile(getStmt(prog))]
                else if (checkType(prog, "SKIP"))
                    then [getLabelFromSkip(getStmt(prog))]
                    else ["error"]
}

rdExit :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExit (l, prog, entry) {
    rdExitWithBlock(l, prog, entry, head(findBlock(l, prog)))
}

rdExitWithBlock :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExitWithBlock (l, prog, entry, block) {
    union(difference(findOrDefault(l, entry), killRD(block, assignments(prog))), genRD(block))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(getLabelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SEQ"))
            then union(findBlock(l, getFstStmtOfSeq(getStmt(prog))), findBlock(l, getSndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then if (isEqual(getLabelFromIf(getStmt(prog)), l))
                    then [getCondFromIf(getStmt(prog))]
                    else union(findBlock(l, getThenFromIf(getStmt(prog))), findBlock(l, getElseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then if (isEqual(getLabelFromWhile(getStmt(prog)), l))
                        then [getCondFromWhile(getStmt(prog))] 
                        else findBlock(l, getBlockFromWhile(getStmt(prog)))
                    else []
}

findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


killRD :: Any -> [(String, String)] -> [(String, String)]
killRD (block, assignments) {
    if (checkType(block, "ASGN"))
        then union([((getVarFromAsgn(getStmt(block))), "?")], filterRD(getVarFromAsgn(getStmt(block)), getLabelFromAsgn(getStmt(block)), assignments))
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (checkType(prog, "ASGN"))
        then [(getVarFromAsgn(getStmt(prog)), getLabelFromAsgn(getStmt(prog)))]
        else if (checkType(prog, "SEQ"))
            then union(assignments(getFstStmtOfSeq(getStmt(prog))), assignments(getSndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(assignments(getThenFromIf(getStmt(prog))), assignments(getElseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then assignments(getBlockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ getTypeStmt(prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then [head (assigns)] ++ filterRD(var, l, tail(assigns))
            else filterRD(var, l, tail(assigns))
}

genRD :: Any -> [(String, String)]
genRD (prog) {
    if (checkType(prog, "ASGN"))
        then [(getVarFromAsgn(getStmt(prog)), getLabelFromAsgn(getStmt(prog)))]
        else []
}

labels :: Any -> [String]
labels (prog) {
    if (checkType(prog, "ASGN"))
    then [getLabelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then labels(getFstStmtOfSeq(getStmt(prog))) ++ labels(getSndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then [getLabelFromIf(getStmt(prog))] ++ union(labels(getThenFromIf(getStmt(prog))), labels(getElseFromIf(getStmt(prog))))
            else if (checkType(prog, "WHILE"))
                then [getLabelFromWhile(getStmt(prog))] ++ labels(getBlockFromWhile(getStmt(prog)))
                else if (checkType(prog, "SKIP"))
                    then [getLabelFromSkip(getStmt(prog))]
                    else []
}

getTypeStmt :: Any -> String
getTypeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(getTypeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

getLabelFromAsgn :: Any -> String
getLabelFromAsgn (asgn) {
    fst(asgn)
}

getVarFromAsgn :: Any -> String
getVarFromAsgn (asgn) {
    fst(snd(asgn))
}

getValueFromAsgn :: Any -> String
getValueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

getLabelFromSkip :: Any -> String
getLabelFromSkip (skip) {
    fst(skip)
}

getFstStmtOfSeq :: Any -> Any
getFstStmtOfSeq (seq) {
    fst(seq)
}

getSndStmtOfSeq :: Any -> Any
getSndStmtOfSeq (seq) {
    snd(seq)
}

getLabelFromIf :: Any -> String
getLabelFromIf (stm) {
    snd(fst(stm))
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(fst(stm))
}

getThenFromIf :: Any -> Any
getThenFromIf (stm) {
    fst(snd(stm))
}

getElseFromIf :: Any -> Any
getElseFromIf (stm) {
    snd(snd(stm))
}

getLabelFromWhile :: Any -> String
getLabelFromWhile (stm) {
    snd(fst(stm))
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(fst(stm))
}

getBlockFromWhile :: Any -> Any
getBlockFromWhile (stm) {
    snd(stm)
}