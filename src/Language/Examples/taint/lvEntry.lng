main :: Any -> [(String, String)]
main (prog) {
    lvEntry (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

lvEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
lvEntry (l, prog, exit) {
    lvEntryWithBlock(l, prog, exit, head(findBlock(l, prog)))
}

lvEntryWithBlock :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
lvEntryWithBlock (l, prog, exit, block) {
    union(difference(findOrDefault(l, exit), killLV(block, assignments(prog))), genLV(block))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(labelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SKIP"))
            then if (isEqual(labelFromSkip(getStmt(prog)), l))
                then [prog]
                else []
            else if (checkType(prog, "SEQ"))
                then union(findBlock(l, fstStmtOfSeq(getStmt(prog))), findBlock(l, sndStmtOfSeq(getStmt(prog))))
                else if (checkType(prog, "IF"))
                    then if (isEqual(labelFromIf(getStmt(prog)), l))
                        then [getCondFromIf(getStmt(prog))]
                        else union(findBlock(l, thenFromIf(getStmt(prog))), findBlock(l, elseFromIf(getStmt(prog))))
                    else if (checkType(prog, "WHILE"))
                        then if (isEqual(labelFromWhile(getStmt(prog)), l))
                            then [getCondFromWhile(getStmt(prog))] 
                            else findBlock(l, blockFromWhile(getStmt(prog)))
                        else []
}


findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, mapping) {
    if (isNil(mapping))
        then []
        else if (isEqual(fst (head (mapping)), l))
            then snd (head (mapping))
            else findOrDefault(l, tail(mapping))
}

killLV :: Any -> [String]
killLV (block) {
    if (checkType(block, "ASGN"))
        then [varFromAsgn(getStmt(block))]
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (checkType(prog, "ASGN"))
        then [(varFromAsgn(getStmt(prog)), labelFromAsgn(getStmt(prog)))]
        else if (checkType(prog, "SEQ"))
            then union(assignments(fstStmtOfSeq(getStmt(prog))), assignments(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(assignments(thenFromIf(getStmt(prog))), assignments(elseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then assignments(blockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then union([head (assigns)], filterRD(var, l, tail(assigns)))
            else filterRD(var, l, tail(assigns))
}

genLV :: Any -> [String]
genLV (prog) {
    if (checkType(prog, "ASGN"))
        then getVarFromValue(valueFromAsgn(getStmt(prog)))
        else if (checkType(prog, "WHILE"))
            then getVarFromValue(getCondFromWhile(getStmt(prog)))
            else if (checkType(prog, "IF"))
                then getVarFromValue(getCondFromIf(getStmt(prog)))
                else []
}

getVarFromValue :: Any -> [String]
getVarFromValue (aexp) {
    if (isPair(snd(aexp)))
        then union(getVarFromValue(getFstOpValue(aexp)), getVarFromValue(getSndOpValue(aexp)))
        else if (checkType(aexp, "VAR"))
            then [snd (aexp)]
            else []
}


typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    snd(fst(stm))
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(fst(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(stm))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(stm))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    snd(fst(stm))
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(fst(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(stm)
}