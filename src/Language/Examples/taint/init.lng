main :: Any -> String
main (prog) {
    init (prog)
}

init :: Any -> String
init (prog) {
    if (checkType(prog, "ASGN"))
    then labelFromAsgn(getStmt(prog))
    else if (checkType(prog, "SEQ"))
        then init (fstStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then labelFromIf(getStmt(prog))
            else if (checkType(prog, "WHILE"))
                then labelFromWhile(getStmt(prog))
                else if (checkType(prog, "SKIP"))
                    then labelFromSkip(getStmt(prog))
                    else ("error " ++ typeStmt(prog))
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    snd(fst(stm))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    snd(fst(stm))
}

