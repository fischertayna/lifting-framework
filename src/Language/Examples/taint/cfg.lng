main :: Any -> [Any]
main (prog) {
    flow (prog)
}

flow :: Any -> [Any]
flow (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then []
        else if (isEqual (fst (prog), "SEQ"))
            then union(makeSetOfLabels(init(snd(snd (prog))), final(fst(snd (prog)))), union(flow(fst(snd (prog))), flow(snd (snd (prog)))))
            else if (isEqual (fst (prog), "IF"))
                then union(union(union (flow (fst (snd (snd (prog)))), flow (snd (snd (snd (prog))))), [(snd (fst (snd (prog))), init(fst (snd (snd (prog)))))]), [(snd (fst (snd (prog))), init(snd (snd (snd (prog)))))])
                else if (isEqual (fst (prog), "WHILE"))
                    then union(union(flow(snd(snd (prog))), [(snd (fst (snd (prog))), init(snd (snd (prog))))]), makeSetOfLabels(snd (fst (snd (prog))), final(snd (snd (prog)))))
                    else "error"
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else [(head (finals), init)] ++ makeSetOfLabels(init, tail(finals))
}


union :: [Any] -> [Any] -> [Any]
union (l1, l2) {
    if (isNil(l1))
        then l2
        else union (tail(l1), addUnique(head(l1), l2))
}

addUnique :: Any -> [Any] -> [Any]
addUnique (x, l) {
    if (elem(x, l))
        then l
        else [x] ++ l
}

elem :: Any -> [Any] -> int
elem (x, l) {
    if (isNil(l))
        then 0
        else if (isEqual(head(l), x))
            then 1
            else elem(x, tail(l))
}

init :: Any -> String
init (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then fst (snd (prog))
    else if (isEqual (fst (prog), "SEQ"))
        then init (fst (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then snd (fst (snd (prog)))
            else if (isEqual (fst (prog), "WHILE"))
                then snd (fst (snd (prog)))
                else "error"
}

final :: Any -> [String]
final (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then [fst (snd (prog))]
    else if (isEqual (fst (prog), "SEQ"))
        then final (snd (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then (final (fst (snd (snd (prog))))) ++ (final (snd (snd (snd (prog)))))
            else if (isEqual (fst (prog), "WHILE"))
                then [snd (fst (snd (prog)))]
                else "error"
}