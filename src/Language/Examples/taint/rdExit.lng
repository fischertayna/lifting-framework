main :: Any -> [(String, String)]
main (prog) {
    rdExit (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

rdExit :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExit (l, prog, entry) {
    rdExitWithBlock(l, prog, entry, head(findBlock(l, prog)))
}

rdExitWithBlock :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExitWithBlock (l, prog, entry, block) {
    union(difference(findOrDefault(l, entry), killRD(block, assignments(prog))), genRD(block))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(labelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SKIP"))
            then if (isEqual(labelFromSkip(getStmt(prog)), l))
                then [prog]
                else []
            else if (checkType(prog, "SEQ"))
                then union(findBlock(l, fstStmtOfSeq(getStmt(prog))), findBlock(l, sndStmtOfSeq(getStmt(prog))))
                else if (checkType(prog, "IF"))
                    then if (isEqual(labelFromIf(getStmt(prog)), l))
                        then [getCondFromIf(getStmt(prog))]
                        else union(findBlock(l, thenFromIf(getStmt(prog))), findBlock(l, elseFromIf(getStmt(prog))))
                    else if (checkType(prog, "WHILE"))
                        then if (isEqual(labelFromWhile(getStmt(prog)), l))
                            then [getCondFromWhile(getStmt(prog))] 
                            else findBlock(l, blockFromWhile(getStmt(prog)))
                        else []
}


findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


killRD :: Any -> [(String, String)] -> [(String, String)]
killRD (block, assignments) {
    if (isEqual (fst (block), "ASGN"))
        then union([((fst (snd (snd (block)))), "?")], filterRD(fst(snd(snd(block))), fst(snd(block)), assignments))
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else if (isEqual (fst (prog), "SEQ"))
            then union(assignments(fst(snd (prog))), assignments(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(assignments (fst (snd (snd (prog)))), assignments (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then assignments(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then union([head (assigns)], filterRD(var, l, tail(assigns)))
            else filterRD(var, l, tail(assigns))
}

genRD :: Any -> [(String, String)]
genRD (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else []
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    snd(fst(stm))
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(fst(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(stm))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(stm))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    snd(fst(stm))
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(fst(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(stm)
}