main :: Any -> int
main (prog) {
    rdExit (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

rdExit :: int -> Any -> [(int, [(String, int)])] -> [(String, int)]
rdExit (l, prog, entry) {
    rdExitWithBlock(l, prog, entry, head(findBlock(l, prog)))
}

rdExitWithBlock :: int -> Any -> [(int, [(String, int)])] -> [(String, int)]
rdExitWithBlock (l, prog, entry, block) {
    union(difference(findOrDefault(l, entry), killRD(block, assigments(prog))), genRD(block))
}

findBlock :: int -> Any -> [Any]
findBlock (l, prog) {
    if (isEqual (fst (prog), "ASGN"))
        then if (isEqual (fst (snd (prog)), l))
            then [prog]
            else []
        else if (isEqual (fst (prog), "SEQ"))
            then union(findBlock(l, fst(snd (prog))), findBlock(l, snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then if (isEqual (snd (fst (snd (prog))), l))
                    then [fst (fst (snd (prog)))]
                    else union(findBlock(l, fst(snd (snd (prog)))), findBlock(l, snd(snd(snd(prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then if (isEqual (snd (fst (snd (prog))), l))
                        then [fst (fst (snd (prog)))] 
                        else findBlock(l, snd(snd (prog)))
                    else []
}


findOrDefault :: int -> [(int, [(String, int)])] -> [(String, int)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


killRD :: Any -> [(String, int)] -> [(String, int)]
killRD (block, assigments) {
    if (isEqual (fst (block), "ASGN"))
        then union([((fst (snd (snd (block)))), 0 - 1)], filterRD(fst(snd(snd(block))), fst(snd(block)), assigments))
        else []
}

assigments :: Any -> [(String, int)]
assigments (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else if (isEqual (fst (prog), "SEQ"))
            then union(assigments(fst(snd (prog))), assigments(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(assigments (fst (snd (snd (prog)))), assigments (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then assigments(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

filterRD :: String -> int -> [(String, int)] -> [(String, int)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then [head (assigns)] ++ filterRD(var, l, tail(assigns))
            else filterRD(var, l, tail(assigns))
}

genRD :: Any -> [(String, int)]
genRD (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then [((fst (snd (snd (prog)))), (fst (snd (prog))))]
        else []
}