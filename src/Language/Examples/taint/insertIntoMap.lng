main :: Any -> int
main (prog) {
    insertIntoMap (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

insertIntoMap :: String -> [(String, String)] -> [(String, [(String, String)])] -> [(String, [(String, String)])]
insertIntoMap (key, value, map) {
    if (isNil(map))
        then [(key, sortList(value))]
        else if (isEqual(fst(head(map)), key))
            then union(tail(map), [(key, sortList(union(value, snd(head(map)))))])
            else union(insertIntoMap(key, value, tail(map)), [head(map)])
}

sortBySecond :: [(String, String)] -> [(String, String)]
sortBySecond (list) {
    if (isNil(list))
        then []
        else insertBySecond(head(list), sortBySecond(tail(list)))
}

insertBySecond :: (String, String) -> [(String, String)] -> [(String, String)]
insertBySecond(pair, sortedList) {
    if (isNil(sortedList))
        then [pair]
        else if (lt(snd(pair), snd(head(sortedList))))
            then union(sortedList, [pair])
            else if (isEqual(snd(pair), snd(head(sortedList))))
                then if (lt(fst(pair), fst(head(sortedList))))
                    then union(sortedList, [pair])
                    else union(insertBySecond(pair, tail(sortedList)), [head(sortedList)])
                else union(insertBySecond(pair, tail(sortedList)), [head(sortedList)])
}
