main :: Any -> [(String, String)]
main (prog) {
    makeSetOfFV (fv (prog))
}

makeSetOfFV :: [String] -> [(String, String)]
makeSetOfFV (fvs) {
    if (isNil(fvs))
        then []
        else [(head (fvs), "?")] ++ makeSetOfFV(tail(fvs))
}

fv :: Any -> [String]
fv (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then union ([fst (snd (snd (prog)))], getVarFromValue(snd (snd (snd (prog)))))
        else if (isEqual (fst (prog), "SEQ"))
            then union(fv(fst(snd (prog))), fv(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(fv (fst (snd (snd (prog)))), fv (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then fv(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}


getVarFromValue :: Any -> [Any]
getVarFromValue (aexp) {
    if (isEqual (fst (aexp), "VAR"))
        then [snd (aexp)]
        else if (isEqual (fst (aexp), "CONST"))
            then []
            else getVarFromValue(fst (snd(aexp))) ++ getVarFromValue(snd (snd(aexp)))

}