main :: Any -> [(String, String)]
main (prog) {
    rdEntry (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

rdEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdEntry (l, prog, exit) {
    if (isEqual (l, init(prog)))
        then makeSetOfFV(fv(prog))
        else findInExit(filterFlow(l, flow(prog)), exit)
}

makeSetOfFV :: [String] -> [(String, String)]
makeSetOfFV (fvs) {
    if (isNil(fvs))
        then []
        else [(head (fvs), "?")] ++ makeSetOfFV(tail(fvs))
}

findInExit :: [(String, String)] -> [(String, [(String, String)])] -> [(String, String)]
findInExit (fl, exit) {
    if (isNil(fl))
        then []
        else findOrDefault(fst(head (fl)), exit) ++ findInExit(tail(fl), exit)
}

findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, exit) {
    if (isNil(exit))
        then []
        else if (isEqual(fst (head (exit)), l))
            then snd (head (exit))
            else findOrDefault(l, tail(exit))
}


filterFlow :: String -> [(String, String)] -> [(String, String)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then [head (fl)] ++ filterFlow(l, tail(fl))
            else filterFlow(l, tail(fl))
}

fv :: Any -> [String]
fv (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then union ([fst (snd (snd (prog)))], getVarFromValue(snd (snd (snd (prog)))))
        else if (isEqual (fst (prog), "SEQ"))
            then union(fv(fst(snd (prog))), fv(snd (snd (prog))))
            else if (isEqual (fst (prog), "IF"))
                then union(fv (fst (snd (snd (prog)))), fv (snd (snd (snd (prog)))))
                else if (isEqual (fst (prog), "WHILE"))
                    then fv(snd(snd (prog)))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}


getVarFromValue :: Any -> [Any]
getVarFromValue (aexp) {
    if (isEqual (fst (aexp), "VAR"))
        then [snd (aexp)]
        else if (isEqual (fst (aexp), "CONST"))
            then []
            else getVarFromValue(fst (snd(aexp))) ++ getVarFromValue(snd (snd(aexp)))

}

flow :: Any -> [(String, String)]
flow (prog) {
    if (isEqual (fst (prog), "ASGN"))
        then []
        else if (isEqual (fst (prog), "SEQ"))
            then union(flow(fst(snd (prog))), union(makeSetOfLabels(init(snd(snd(prog))), final(fst(snd (prog)))), flow(snd (snd (prog)))))
            else if (isEqual (fst (prog), "IF"))
                then union([(snd (fst (snd (prog))), init(fst (snd (snd (prog)))))], union(flow (fst (snd (snd (prog)))), union([(snd (fst (snd (prog))), init(snd (snd (snd (prog)))))], flow (snd (snd (snd (prog)))))))
                else if (isEqual (fst (prog), "WHILE"))
                    then union([(snd (fst (snd (prog))), init(snd (snd (prog))))], union(flow(snd(snd (prog))), makeSetOfLabels(snd (fst (snd (prog))), final(snd (snd (prog))))))
                    else if (isEqual (fst (prog), "SKIP"))
                        then []
                        else ["error " ++ fst (prog)]
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else [(head (finals), init)] ++ makeSetOfLabels(init, tail(finals))
}


init :: Any -> String
init (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then fst (snd (prog))
    else if (isEqual (fst (prog), "SEQ"))
        then init (fst (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then snd (fst (snd (prog)))
            else if (isEqual (fst (prog), "WHILE"))
                then snd (fst (snd (prog)))
                else if (isEqual (fst (prog), "SKIP"))
                    then fst (snd (prog))
                    else ("error " ++ fst (prog))
}

final :: Any -> [String]
final (prog) {
    if (isEqual (fst (prog), "ASGN"))
    then [fst (snd (prog))]
    else if (isEqual (fst (prog), "SEQ"))
        then final (snd (snd (prog)))
        else if (isEqual (fst (prog), "IF"))
            then (final (fst (snd (snd (prog))))) ++ (final (snd (snd (snd (prog)))))
            else if (isEqual (fst (prog), "WHILE"))
                then [snd (fst (snd (prog)))]
                else if (isEqual (fst (prog), "SKIP"))
                    then [fst (snd (prog))]
                    else ["error" ++ fst (prog)]
}