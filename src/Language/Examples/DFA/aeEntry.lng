main :: Any -> [(String, String)]
main (prog) {
    aeEntry (fst(prog), fst(snd(prog)), snd(snd(prog)))
}

aeEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
aeEntry (l, prog, exit) {
    if (isEqual (l, init(prog)))
        then []
        else findWithIntersection(filterFlow(l, flow(prog)), exit)
}

findWithIntersection :: [(String, String)] -> [(String, [(String, String)])] -> [(String, String)]
findWithIntersection (fl, mapping) {
    if (isNil(fl))
        then []
        else intersection(findOrDefault(fst(head (fl)), mapping), findWithIntersection(tail(fl), mapping))
}

findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, mapping) {
    if (isNil(mapping))
        then []
        else if (isEqual(fst (head (mapping)), l))
            then snd (head (mapping))
            else findOrDefault(l, tail(mapping))
}

filterFlow :: String -> [(String, String)] -> [(String, String)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then union([head (fl)], filterFlow(l, tail(fl)))
            else filterFlow(l, tail(fl))
}

flow :: Any -> [(String, String)]
flow (prog) {
    if (checkType(prog, "ASGN"))
        then []
        else if (checkType(prog, "SEQ"))
            then union(flow(fstStmtOfSeq(getStmt(prog))), union(flow(sndStmtOfSeq(getStmt(prog))), makeSetOfLabels(init(sndStmtOfSeq(getStmt(prog))), final(fstStmtOfSeq(getStmt(prog))))))
            else if (checkType(prog, "IF"))
                then union([(labelFromIf(getStmt(prog)), init(thenFromIf(getStmt(prog))))], union(flow(thenFromIf(getStmt(prog))), union([(labelFromIf(getStmt(prog)), init(elseFromIf(getStmt(prog))))], flow(elseFromIf(getStmt(prog))))))
                else if (checkType(prog, "WHILE"))
                    then union(flow(blockFromWhile(getStmt(prog))), union([(labelFromWhile(getStmt(prog)), init(blockFromWhile(getStmt(prog))))], makeSetOfLabels(labelFromWhile(getStmt(prog)), final(blockFromWhile(getStmt(prog))))))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else [(head (finals), init)] ++ makeSetOfLabels(init, tail(finals))
}


init :: Any -> String
init (prog) {
    if (checkType(prog, "ASGN"))
    then labelFromAsgn(getStmt(prog))
    else if (checkType(prog, "SEQ"))
        then init (fstStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then labelFromIf(getStmt(prog))
            else if (checkType(prog, "WHILE"))
                then labelFromWhile(getStmt(prog))
                else if (checkType(prog, "SKIP"))
                    then labelFromSkip(getStmt(prog))
                    else ("error " ++ typeStmt(prog))
}

final :: Any -> [String]
final (prog) {
    if (checkType(prog, "ASGN"))
    then [labelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then final(sndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then union(final(thenFromIf(getStmt(prog))), final(elseFromIf(getStmt(prog))))
            else if (checkType(prog, "WHILE"))
                then [labelFromWhile(getStmt(prog))]
                else if (checkType(prog, "SKIP"))
                    then [labelFromSkip(getStmt(prog))]
                    else ["error"]
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    fst(stm)
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(snd(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(snd(stm)))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(snd(stm)))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    fst(stm)
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(snd(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(snd(stm))
}