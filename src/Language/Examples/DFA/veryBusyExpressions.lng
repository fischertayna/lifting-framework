main :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
main (input) {
    veryBusyExpressions(fst(input), snd(input))
}

veryBusyExpressions :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
veryBusyExpressions(tries, prog) {
    chaoticIteration(tries, prog, ([], []))
}

chaoticIteration :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticIteration (tries, prog, x) {
    if (isEqual(tries, 0))
        then x
        else chaoticRecursion(tries - 1, prog, f(prog, x), x)
}

chaoticRecursion :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticRecursion (tries, prog, y, x) {
    if (isEqual (y, x))
        then x
        else chaoticIteration (tries, prog, y)
}

f :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
f (prog, lv) {
    updateMappings(prog, labels(prog), lv)
}

updateMappings :: Any -> [String] -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappings(prog, labels, mappings) {
    if (isNil(labels))
        then mappings
        else updateMappings(prog, tail(labels), updateMappingsForLabel(prog, head(labels), mappings))
}

updateMappingsForLabel :: Any -> String -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappingsForLabel(prog, l, old) {
    (insertIntoMap(l, vbEntry(l, prog, snd(old)), fst(old)), insertIntoMap(l, vbExit(l, prog, fst(old)), snd(old)))
}

insertIntoMap :: String -> [(String, String)] -> [(String, [(String, String)])] -> [(String, [(String, String)])]
insertIntoMap (key, value, map) {
    if (isNil(map))
        then [(key, sortList(value))]
        else if (isEqual(fst(head(map)), key))
            then union(tail(map), [(key, sortList(union(value, snd(head(map)))))])
            else union(insertIntoMap(key, value, tail(map)), [head(map)])
}

vbEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
vbEntry (l, prog, exit) {
    vbEntryWithBlock(l, prog, exit, head(findBlock(l, prog)))
}

vbEntryWithBlock :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
vbEntryWithBlock (l, prog, exit, block) {
    union(difference(findOrDefault(l, exit), killVB(block, nonTrivialExpression(prog))), genVB(block))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(labelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SKIP"))
            then if (isEqual(labelFromSkip(getStmt(prog)), l))
                then [prog]
                else []
            else if (checkType(prog, "SEQ"))
                then union(findBlock(l, fstStmtOfSeq(getStmt(prog))), findBlock(l, sndStmtOfSeq(getStmt(prog))))
                else if (checkType(prog, "IF"))
                    then if (isEqual(labelFromIf(getStmt(prog)), l))
                        then [getCondFromIf(getStmt(prog))]
                        else union(findBlock(l, thenFromIf(getStmt(prog))), findBlock(l, elseFromIf(getStmt(prog))))
                    else if (checkType(prog, "WHILE"))
                        then if (isEqual(labelFromWhile(getStmt(prog)), l))
                            then [getCondFromWhile(getStmt(prog))] 
                            else findBlock(l, blockFromWhile(getStmt(prog)))
                        else []
}


findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, mapping) {
    if (isNil(mapping))
        then []
        else if (isEqual(fst (head (mapping)), l))
            then snd (head (mapping))
            else findOrDefault(l, tail(mapping))
}

filterFlow :: String -> [(String, String)] -> [(String, String)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then union([head (fl)], filterFlow(l, tail(fl)))
            else filterFlow(l, tail(fl))
}

killVB :: Any -> [Any] -> [String]
killVB (block, exps) {
    if (checkType(block, "ASGN"))
        then filterNonTrivialExpressions(varFromAsgn(getStmt(block)), exps)
        else []
}

filterNonTrivialExpressions :: String -> [Any] -> [Any]
filterNonTrivialExpressions (var, exps) {
    if (isNil(exps))
        then []
        else if (isMember(var, fvAexp(head(exps))))
            then union([head (exps)], filterNonTrivialExpressions(var, tail(exps)))
            else filterNonTrivialExpressions(var, tail(exps))
}

genVB :: Any -> [Any]
genVB (prog) {
    if (checkType(prog, "ASGN"))
        then nonTrivialAExpression(valueFromAsgn(getStmt(prog)))
        else if (checkType(prog, "WHILE"))
            then nonTrivialBExpression(getCondFromWhile(getStmt(prog)))
            else if (checkType(prog, "IF"))
                then nonTrivialBExpression(getCondFromIf(getStmt(prog)))
                else []
}

fvAexp :: Any -> [Any]
fvAexp (aexp) {
    if (checkType(aexp, "VAR"))
        then [snd(aexp)]
        else if (isPair(snd(aexp)))
            then union(fvAexp(getFstOpValue(aexp)), fvAexp(getSndOpValue(aexp)))
            else []
}

nonTrivialExpression :: Any -> [Any]
nonTrivialExpression (prog) {
    if (checkType(prog, "ASGN"))
        then nonTrivialAExpression(valueFromAsgn(getStmt(prog)))
        else if (checkType(prog, "SEQ"))
            then union(nonTrivialExpression(fstStmtOfSeq(getStmt(prog))), nonTrivialExpression(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(nonTrivialBExpression(getCondFromIf(getStmt(prog))), union(nonTrivialExpression(thenFromIf(getStmt(prog))), nonTrivialExpression(elseFromIf(getStmt(prog)))))
                else if (checkType(prog, "WHILE"))
                    then union(nonTrivialBExpression(getCondFromWhile(getStmt(prog))), nonTrivialExpression(blockFromWhile(getStmt(prog))))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

nonTrivialAExpression :: Any -> [Any]
nonTrivialAExpression (aexp) {
    if (isPair(snd(aexp)))
        then union ([aexp], union(nonTrivialAExpression(getFstOpValue(aexp)), nonTrivialAExpression(getSndOpValue(aexp))))
        else []
}

nonTrivialBExpression :: Any -> [Any]
nonTrivialBExpression (bexp) {
    if (isPair(snd(bexp)))
        then union(nonTrivialAExpression(getFstOpValue(bexp)), nonTrivialAExpression(getSndOpValue(bexp)))
        else []
}

getVarFromAexp :: Any -> [Any]
getVarFromAexp (aexp) {
    if (isPair(snd(aexp)))
        then union(getVarFromAexp(getFstOpValue(aexp)), getVarFromAexp(getSndOpValue(aexp)))
        else if (checkType(aexp, "VAR"))
            then [snd (aexp)]
            else []
}

flow :: Any -> [(String, String)]
flow (prog) {
    if (checkType(prog, "ASGN"))
        then []
        else if (checkType(prog, "SEQ"))
            then union(flow(fstStmtOfSeq(getStmt(prog))), union(flow(sndStmtOfSeq(getStmt(prog))), makeSetOfLabels(init(sndStmtOfSeq(getStmt(prog))), final(fstStmtOfSeq(getStmt(prog))))))
            else if (checkType(prog, "IF"))
                then union([(labelFromIf(getStmt(prog)), init(thenFromIf(getStmt(prog))))], union(flow(thenFromIf(getStmt(prog))), union([(labelFromIf(getStmt(prog)), init(elseFromIf(getStmt(prog))))], flow(elseFromIf(getStmt(prog))))))
                else if (checkType(prog, "WHILE"))
                    then union(flow(blockFromWhile(getStmt(prog))), union([(labelFromWhile(getStmt(prog)), init(blockFromWhile(getStmt(prog))))], makeSetOfLabels(labelFromWhile(getStmt(prog)), final(blockFromWhile(getStmt(prog))))))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else union([(head (finals), init)], makeSetOfLabels(init, tail(finals)))
}

init :: Any -> String
init (prog) {
    if (checkType(prog, "ASGN"))
    then labelFromAsgn(getStmt(prog))
    else if (checkType(prog, "SEQ"))
        then init (fstStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then labelFromIf(getStmt(prog))
            else if (checkType(prog, "WHILE"))
                then labelFromWhile(getStmt(prog))
                else if (checkType(prog, "SKIP"))
                    then labelFromSkip(getStmt(prog))
                    else ("error " ++ typeStmt(prog))
}

final :: Any -> [String]
final (prog) {
    if (checkType(prog, "ASGN"))
    then [labelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then final(sndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then union(final(thenFromIf(getStmt(prog))), final(elseFromIf(getStmt(prog))))
            else if (checkType(prog, "WHILE"))
                then [labelFromWhile(getStmt(prog))]
                else if (checkType(prog, "SKIP"))
                    then [labelFromSkip(getStmt(prog))]
                    else ["error"]
}

vbExit :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
vbExit (l, prog, entry) {
    if (isMember (l, final(prog)))
        then []
        else findWithIntersection(filterFlow(l, flowR(prog)), entry)
}

findWithIntersection :: [(String, String)] -> [(String, [(String, String)])] -> [(String, String)]
findWithIntersection (fl, mapping) {
    if (isEqual(length(fl), 1))
        then findOrDefault(fst(head (fl)), mapping)
        else intersection(findOrDefault(fst(head (fl)), mapping), findWithIntersection(tail(fl), mapping))
}

flowR :: Any -> [(String, String)]
flowR (prog) {
    reverse(flow(prog))
}

reverse :: [(String, String)] -> [(String, String)]
reverse (l) {
    if (isNil(l))
        then []
        else [(snd(head(l)), fst(head(l)))] ++ reverse(tail(l))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(labelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SKIP"))
            then if (isEqual(labelFromSkip(getStmt(prog)), l))
                then [prog]
                else []
            else if (checkType(prog, "SEQ"))
                then union(findBlock(l, fstStmtOfSeq(getStmt(prog))), findBlock(l, sndStmtOfSeq(getStmt(prog))))
                else if (checkType(prog, "IF"))
                    then if (isEqual(labelFromIf(getStmt(prog)), l))
                        then [getCondFromIf(getStmt(prog))]
                        else union(findBlock(l, thenFromIf(getStmt(prog))), findBlock(l, elseFromIf(getStmt(prog))))
                    else if (checkType(prog, "WHILE"))
                        then if (isEqual(labelFromWhile(getStmt(prog)), l))
                            then [getCondFromWhile(getStmt(prog))] 
                            else findBlock(l, blockFromWhile(getStmt(prog)))
                        else []
}

killLV :: Any -> [String]
killLV (block) {
    if (checkType(block, "ASGN"))
        then [varFromAsgn(getStmt(block))]
        else []
}

genLV :: Any -> [String]
genLV (prog) {
    if (checkType(prog, "ASGN"))
        then getVarFromAexp(valueFromAsgn(getStmt(prog)))
        else if (checkType(prog, "WHILE"))
            then getVarFromAexp(getCondFromWhile(getStmt(prog)))
            else if (checkType(prog, "IF"))
                then getVarFromAexp(getCondFromIf(getStmt(prog)))
                else []
}

labels :: Any -> [String]
labels (prog) {
    if (checkType(prog, "ASGN"))
    then [labelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then union(labels(sndStmtOfSeq(getStmt(prog))), labels(fstStmtOfSeq(getStmt(prog))))
        else if (checkType(prog, "IF"))
            then union(union(labels(elseFromIf(getStmt(prog))), labels(thenFromIf(getStmt(prog)))), [labelFromIf(getStmt(prog))])
            else if (checkType(prog, "WHILE"))
                then union(labels(blockFromWhile(getStmt(prog))), [labelFromWhile(getStmt(prog))])
                else if (checkType(prog, "SKIP"))
                    then [labelFromSkip(getStmt(prog))]
                    else []
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    fst(stm)
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(snd(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(snd(stm)))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(snd(stm)))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    fst(stm)
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(snd(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(snd(stm))
}