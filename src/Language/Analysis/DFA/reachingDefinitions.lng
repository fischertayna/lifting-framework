main :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
main (input) {
    reachingDefinitions (10, input)
}

reachingDefinitions :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])])
reachingDefinitions(tries, prog) {
    chaoticIteration(tries, prog, ([], []))
}

chaoticIteration :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticIteration (tries, prog, x) {
    if (isEqual(tries, 0))
        then x
        else chaoticRecursion(tries - 1, prog, f(prog, x), x)
}

chaoticRecursion :: int -> Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
chaoticRecursion (tries, prog, y, x) {
    if (isEqual (y, x))
        then x
        else chaoticIteration (tries, prog, y)
}

f :: Any -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
f (prog, rd) {
    updateMappings(prog, labels(prog), rd)
}

updateMappings :: Any -> [String] -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappings(prog, labels, mappings) {
    if (isNil(labels))
        then mappings
        else updateMappings(prog, tail(labels), updateMappingsForLabel(prog, head(labels), mappings))
}

updateMappingsForLabel :: Any -> String -> ([(String, [(String, String)])], [(String, [(String, String)])]) -> ([(String, [(String, String)])], [(String, [(String, String)])])
updateMappingsForLabel(prog, l, old) {
    (insertIntoMap(l, rdEntry(l, prog, snd(old)), fst(old)), insertIntoMap(l, rdExit(l, prog, fst(old)), snd(old)))
}

insertIntoMap :: String -> [(String, String)] -> [(String, [(String, String)])] -> [(String, [(String, String)])]
insertIntoMap (key, value, map) {
    if (isNil(map))
        then [(key, sortList(value))]
        else if (isEqual(fst(head(map)), key))
            then union(tail(map), [(key, sortList(union(value, snd(head(map)))))])
            else union(insertIntoMap(key, value, tail(map)), [head(map)])
}

rdEntry :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdEntry (l, prog, exit) {
    if (isEqual (l, init(prog)))
        then makeSetOfFV(fv(prog))
        else findWithUnion(filterFlow(l, flow(prog)), exit)
}

makeSetOfFV :: [String] -> [(String, String)]
makeSetOfFV (fvs) {
    if (isNil(fvs))
        then []
        else union([(head (fvs), "?")], makeSetOfFV(tail(fvs)))
}

findWithUnion :: [(String, String)] -> [(String, [(String, String)])] -> [(String, String)]
findWithUnion (fl, mapping) {
    if (isNil(fl))
        then []
        else union(findOrDefault(fst(head (fl)), mapping), findWithUnion(tail(fl), mapping))
}

findOrDefault :: String -> [(String, [(String, String)])] -> [(String, String)]
findOrDefault (l, mapping) {
    if (isNil(mapping))
        then []
        else if (isEqual(fst (head (mapping)), l))
            then snd (head (mapping))
            else findOrDefault(l, tail(mapping))
}

filterFlow :: String -> [(String, String)] -> [(String, String)]
filterFlow (l, fl) {
    if (isNil(fl))
        then []
        else if (isEqual(snd (head (fl)), l))
            then union([head (fl)], filterFlow(l, tail(fl)))
            else filterFlow(l, tail(fl))
}

fv :: Any -> [String]
fv (prog) {
    if (checkType(prog, "ASGN"))
        then union ([varFromAsgn(getStmt(prog))], getVarFromAexp(valueFromAsgn(getStmt(prog))))
        else if (checkType(prog, "SEQ"))
            then union(fv(fstStmtOfSeq(getStmt(prog))), fv(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(fv(thenFromIf(getStmt(prog))), fv(elseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then fv(blockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

getVarFromAexp :: Any -> [Any]
getVarFromAexp (aexp) {
    if (isPair(snd(aexp)))
        then union(getVarFromAexp(getFstOpValue(aexp)), getVarFromAexp(getSndOpValue(aexp)))
        else if (checkType(aexp, "VAR"))
            then [snd (aexp)]
            else []
}

flow :: Any -> [(String, String)]
flow (prog) {
    if (checkType(prog, "ASGN"))
        then []
        else if (checkType(prog, "SEQ"))
            then union(flow(fstStmtOfSeq(getStmt(prog))), union(flow(sndStmtOfSeq(getStmt(prog))), makeSetOfLabels(init(sndStmtOfSeq(getStmt(prog))), final(fstStmtOfSeq(getStmt(prog))))))
            else if (checkType(prog, "IF"))
                then union([(labelFromIf(getStmt(prog)), init(thenFromIf(getStmt(prog))))], union(flow(thenFromIf(getStmt(prog))), union([(labelFromIf(getStmt(prog)), init(elseFromIf(getStmt(prog))))], flow(elseFromIf(getStmt(prog))))))
                else if (checkType(prog, "WHILE"))
                    then union(flow(blockFromWhile(getStmt(prog))), union([(labelFromWhile(getStmt(prog)), init(blockFromWhile(getStmt(prog))))], makeSetOfLabels(labelFromWhile(getStmt(prog)), final(blockFromWhile(getStmt(prog))))))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

makeSetOfLabels :: String -> [String] -> [(String, String)]
makeSetOfLabels (init, finals) {
    if (isNil(finals))
        then []
        else union([(head (finals), init)], makeSetOfLabels(init, tail(finals)))
}

init :: Any -> String
init (prog) {
    if (checkType(prog, "ASGN"))
    then labelFromAsgn(getStmt(prog))
    else if (checkType(prog, "SEQ"))
        then init (fstStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then labelFromIf(getStmt(prog))
            else if (checkType(prog, "WHILE"))
                then labelFromWhile(getStmt(prog))
                else if (checkType(prog, "SKIP"))
                    then labelFromSkip(getStmt(prog))
                    else ("error " ++ typeStmt(prog))
}

final :: Any -> [String]
final (prog) {
    if (checkType(prog, "ASGN"))
    then [labelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then final(sndStmtOfSeq(getStmt(prog)))
        else if (checkType(prog, "IF"))
            then union(final(thenFromIf(getStmt(prog))), final(elseFromIf(getStmt(prog))))
            else if (checkType(prog, "WHILE"))
                then [labelFromWhile(getStmt(prog))]
                else if (checkType(prog, "SKIP"))
                    then [labelFromSkip(getStmt(prog))]
                    else ["error"]
}

rdExit :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExit (l, prog, entry) {
    rdExitWithBlock(l, prog, entry, head(findBlock(l, prog)))
}

rdExitWithBlock :: String -> Any -> [(String, [(String, String)])] -> [(String, String)]
rdExitWithBlock (l, prog, entry, block) {
    union(difference(findOrDefault(l, entry), killRD(block, assignments(prog))), genRD(block))
}

findBlock :: String -> Any -> [Any]
findBlock (l, prog) {
    if (checkType(prog, "ASGN"))
        then if (isEqual(labelFromAsgn(getStmt(prog)), l))
            then [prog]
            else []
        else if (checkType(prog, "SKIP"))
            then if (isEqual(labelFromSkip(getStmt(prog)), l))
                then [prog]
                else []
            else if (checkType(prog, "SEQ"))
                then union(findBlock(l, fstStmtOfSeq(getStmt(prog))), findBlock(l, sndStmtOfSeq(getStmt(prog))))
                else if (checkType(prog, "IF"))
                    then if (isEqual(labelFromIf(getStmt(prog)), l))
                        then [getCondFromIf(getStmt(prog))]
                        else union(findBlock(l, thenFromIf(getStmt(prog))), findBlock(l, elseFromIf(getStmt(prog))))
                    else if (checkType(prog, "WHILE"))
                        then if (isEqual(labelFromWhile(getStmt(prog)), l))
                            then [getCondFromWhile(getStmt(prog))] 
                            else findBlock(l, blockFromWhile(getStmt(prog)))
                        else []
}

killRD :: Any -> [(String, String)] -> [(String, String)]
killRD (block, assignments) {
    if (checkType(block, "ASGN"))
        then union([((varFromAsgn(getStmt(block))), "?")], filterRD(varFromAsgn(getStmt(block)), labelFromAsgn(getStmt(block)), assignments))
        else []
}

assignments :: Any -> [(String, String)]
assignments (prog) {
    if (checkType(prog, "ASGN"))
        then [(varFromAsgn(getStmt(prog)), labelFromAsgn(getStmt(prog)))]
        else if (checkType(prog, "SEQ"))
            then union(assignments(fstStmtOfSeq(getStmt(prog))), assignments(sndStmtOfSeq(getStmt(prog))))
            else if (checkType(prog, "IF"))
                then union(assignments(thenFromIf(getStmt(prog))), assignments(elseFromIf(getStmt(prog))))
                else if (checkType(prog, "WHILE"))
                    then assignments(blockFromWhile(getStmt(prog)))
                    else if (checkType(prog, "SKIP"))
                        then []
                        else ["error " ++ typeStmt(prog)]
}

filterRD :: String -> String -> [(String, String)] -> [(String, String)]
filterRD (var, l, assigns) {
    if (isNil(assigns))
        then []
        else if (isEqual(fst(head(assigns)), var))
            then union([head (assigns)], filterRD(var, l, tail(assigns)))
            else filterRD(var, l, tail(assigns))
}

genRD :: Any -> [(String, String)]
genRD (prog) {
    if (checkType(prog, "ASGN"))
        then [(varFromAsgn(getStmt(prog)), labelFromAsgn(getStmt(prog)))]
        else []
}

labels :: Any -> [String]
labels (prog) {
    if (checkType(prog, "ASGN"))
    then [labelFromAsgn(getStmt(prog))]
    else if (checkType(prog, "SEQ"))
        then union(labels(sndStmtOfSeq(getStmt(prog))), labels(fstStmtOfSeq(getStmt(prog))))
        else if (checkType(prog, "IF"))
            then union(union(labels(elseFromIf(getStmt(prog))), labels(thenFromIf(getStmt(prog)))), [labelFromIf(getStmt(prog))])
            else if (checkType(prog, "WHILE"))
                then union(labels(blockFromWhile(getStmt(prog))), [labelFromWhile(getStmt(prog))])
                else if (checkType(prog, "SKIP"))
                    then [labelFromSkip(getStmt(prog))]
                    else []
}

typeStmt :: Any -> String
typeStmt (prog) {
    fst(prog)
}

checkType :: Any -> String -> int
checkType (prog, stmtType) {
    isEqual(typeStmt(prog), stmtType)
}

getStmt :: Any -> Any 
getStmt (prog) {
    snd(prog)
}

labelFromAsgn :: Any -> String
labelFromAsgn (asgn) {
    fst(asgn)
}

varFromAsgn :: Any -> String
varFromAsgn (asgn) {
    fst(snd(asgn))
}

valueFromAsgn :: Any -> String
valueFromAsgn (asgn) {
    snd(snd(asgn))
}

getFstOpValue :: Any -> String
getFstOpValue (aexp) {
    fst(snd(aexp))
}

getSndOpValue :: Any -> String
getSndOpValue (aexp) {
    snd(snd(aexp))
}

labelFromSkip :: Any -> String
labelFromSkip (skip) {
    fst(skip)
}

fstStmtOfSeq :: Any -> Any
fstStmtOfSeq (seq) {
    fst(seq)
}

sndStmtOfSeq :: Any -> Any
sndStmtOfSeq (seq) {
    snd(seq)
}

labelFromIf :: Any -> String
labelFromIf (stm) {
    fst(stm)
}

getCondFromIf :: Any -> String
getCondFromIf (stm) {
    fst(snd(stm))
}

thenFromIf :: Any -> Any
thenFromIf (stm) {
    fst(snd(snd(stm)))
}

elseFromIf :: Any -> Any
elseFromIf (stm) {
    snd(snd(snd(stm)))
}

labelFromWhile :: Any -> String
labelFromWhile (stm) {
    fst(stm)
}

getCondFromWhile :: Any -> String
getCondFromWhile (stm) {
    fst(snd(stm))
}

blockFromWhile :: Any -> Any
blockFromWhile (stm) {
    snd(snd(stm))
}