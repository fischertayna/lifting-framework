Prog. Program  ::= [Function] ;
Dec. Decl ::= Ident "::" [Type] ;
Fun.  Function ::= Decl Ident "(" [Ident] ")" "{" Exp "}" ;

comment "//" ;
comment "/*" "*/" ;

terminator Function "" ;
separator  Type "->" ;
separator  Ident "," ;
separator  Exp "," ;

EIf.  Exp ::= "if" "(" Exp ")" "then" Exp "else" Exp;
EOr.  Exp1 ::= Exp1 "||" Exp2 ;
EAnd. Exp2 ::= Exp2 "&&" Exp3 ;
ENot. Exp3 ::= "!" Exp3 ;
ECon. Exp4  ::= Exp4  "++" Exp5 ;
EAdd. Exp4  ::= Exp4  "+" Exp5 ;
ESub. Exp4  ::= Exp4  "-" Exp5 ;
EMul. Exp5  ::= Exp5 "*" Exp6 ;
EDiv. Exp5  ::= Exp5 "/" Exp6 ;
Call. Exp6  ::= Ident "(" [Exp] ")" ;
EInt. Exp7  ::= Integer ;
EVar. Exp7  ::= Ident ;
EStr. Exp7  ::= String ;
EPair. Exp7 ::= "(" Exp "," Exp ")" ;
EList. Exp7 ::= "[" [Exp] "]" ;
ETrue. Exp7 ::= "True" ;
EFalse. Exp7 ::= "False" ;

Tbool. Type ::= "bool" ;
Tint.  Type ::= "int" ;
TStr.  Type ::= "String" ;
TFun.  Type ::= Function ;
TPair. Type ::= "(" Type "," Type ")" ;
TList. Type ::= "[" Type "]" ;

coercions Exp 7 ;

